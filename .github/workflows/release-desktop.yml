name: Build Desktop Installers
on:
  push:
    tags: [ "v*" ]

permissions:
  contents: write

jobs:
  build-release:
    name: ${{ matrix.os }} build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with: { node-version: '20' }

      - name: Setup Python
        uses: actions/setup-python@v5
        with: { python-version: '3.12' }

      # Si tu UI est√° en webapp/, se compila antes y luego la copia tu build script
      - name: Build webapp (si existe)
        if: ${{ hashFiles('webapp/package.json') != '' }}
        working-directory: webapp
        run: |
          npm ci || npm install
          npm run build

      # Construir bridge si existe (PyInstaller)
      - name: Build bridge (si existe)
        if: ${{ hashFiles('p2p_bridge/bridge.py') != '' }}
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller -r p2p_bridge/requirements.txt
          pyinstaller -F p2p_bridge/bridge.py -n bridge
        shell: bash

      # Instalar deps y construir instaladores con electron-builder
      - name: Install deps (Electron)
        working-directory: desktop
        run: npm ci || npm install

      - name: Build installers
        working-directory: desktop
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx electron-builder

      - name: Upload artifacts to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          files: |
            desktop/release/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
